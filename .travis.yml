language: rust
rust: stable
sudo: false

INSTALL_NODE_VIA_NVM: &INSTALL_NODE_VIA_NVM
  |
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
    source ~/.nvm/nvm.sh
    nvm install 10

cache: cargo

matrix:
  include:
  - name: Tests
    env: RUST_BACKTRACE=1 #to make Rust print out a stacktrace on a panic. This is particularly useful combined with panic!(), unreachable!() and unimplemented!() which you can use to structure failure modes in your programs
    rust: stable
    # Additional addons
    # addons:
    #   firefox: latest
    #   chrome: stable
    before_script:
      # Install wasm-pack. wasm-pack's target_os is wasm32, socket2, net2 can NOT be built on wasm32
      # - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh -s -- -f
      # Install cargo-update
      # - (test -x $HOME/.cargo/bin/cargo-install-update || cargo install cargo-update)
      # Install cargo-generate
      # - (test -x $HOME/.cargo/bin/cargo-generate || cargo install --vers "^0.2" cargo-generate)
      # Update cargo
      # - cargo install-update -a
      # Set the target
      # - rustup target add wasm32-unknown-unknown
    install:
      # Do installings node v10.10
      - *INSTALL_NODE_VIA_NVM
    script:
      # Analyze the project to see it has any errors, without building it
      - cargo check
      # - cargo check --target wasm32-unknown-unknown
      # Build the project & Run tests
      # - cargo test --doc
      - cargo test --all
      # - cargo test --all --target wasm32-unknown-unknown
  # In matrix, these jobs will run in parallel.
  # - name: CodeCov build & run
  #   addons:
  #     apt:
  #       packages:
  #         - libcurl4-openssl-dev
  #         - libelf-dev
  #         - libdw-dev
  #         - cmake
  #         - gcc
  #         - binutils-dev
  #         - libiberty-dev
  #   after_success: |
  #     wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
  #     tar xzf master.tar.gz &&
  #     cd kcov-master &&
  #     mkdir build &&
  #     cd build &&
  #     cmake .. &&
  #     make &&
  #     make install DESTDIR=../../kcov-build &&
  #     cd ../.. &&
  #     rm -rf kcov-master &&
  #     for file in target/debug/examplerust-*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
  #     bash <(curl -s https://codecov.io/bash) &&
  #     echo "Uploaded code coverage"

# ONLY run on successfully tested
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev
after_success: |
  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
  tar xzf master.tar.gz &&
  cd kcov-master &&
  mkdir build &&
  cd build &&
  cmake .. &&
  make &&
  make install DESTDIR=../../kcov-build &&
  cd ../.. &&
  rm -rf kcov-master &&
  for file in target/debug/examplerust-*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
  bash <(curl -s https://codecov.io/bash) &&
  echo "Uploaded code coverage"

notifications:
  email:
    on_success: never